#version 450

struct Particle {
    vec3 position;
    vec3 velocity;
    float lifeTime;
// Additional per-particle properties...
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

const vec3 gravity = vec3(0.0, -9.8, 0.0);
const float initialLifeTime = 5.0;
const vec3 initialVelocity = vec3(0.0, 10.0, 0.0);
const vec3 startPosition = vec3(0.0, 0.0, 0.0);

// Encapsulate deltaTime in a uniform block
layout(binding = 1) uniform Time {
    float deltaTime;
};

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= particles.length()) return;

    Particle p = particles[id];

    // Apply physics update using deltaTime from the uniform block
    p.velocity += gravity * deltaTime;
    p.position += p.velocity * deltaTime;
    p.lifeTime -= deltaTime;

    if (p.lifeTime <= 0.0) {
        p.position = startPosition;
        p.velocity = initialVelocity;
        p.lifeTime = initialLifeTime;
    }

    particles[id] = p;
}
