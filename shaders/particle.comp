#version 450

layout(local_size_x = 32) in;

struct Particle {
    vec3 position;
    vec3 velocity;
    float lifeTime;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(push_constant) uniform PushConstants {
    float deltaTime;
} pushConstants;

// Simple random number generator
float rand(vec2 co){
    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

const vec3 gravity = vec3(0.0, -9.81, 0.0); // Gravity vector (assuming negative Y is down)

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= particles.length()) return;

    // Initialize or reset particle
    if (particles[id].lifeTime <= 0.0) {
        particles[id].position = vec3(0.0); // Start at the origin
        float angle = 2.0 * 3.14159265 * rand(vec2(id, id)); // Random angle
        float speed = rand(vec2(id, angle)) * 5.0; // Random speed
        particles[id].velocity = vec3(cos(angle) * speed, sin(angle) * speed, rand(vec2(angle, id)) * speed);
        particles[id].lifeTime = 5.0; // Reset lifetime
    }

    // Apply gravity
    particles[id].velocity += gravity * pushConstants.deltaTime;

    // Update particle position and decrease lifetime
    particles[id].position += particles[id].velocity * pushConstants.deltaTime;
    particles[id].lifeTime -= pushConstants.deltaTime;
}
